function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 观察者模式，它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。
 * 在观察者模式中有两个主要角色：Subject（主题）和 Observer（观察者）。
 */
//观察者
class ConcreteObserver {
  constructor(name) {
    this.name = name;
  }

  notify() {
    console.log(`${this.name} has been notified.`);
  }

} //主题


class Subject {
  constructor() {
    _defineProperty(this, "observers", []);
  }

  addObserver(observer) {
    console.log(observer, "is pushed!");
    this.observers.push(observer);
  }

  deleteObserver(observer) {
    console.log("remove", observer);
    const n = this.observers.indexOf(observer);
    n != -1 && this.observers.splice(n, 1);
  } //通知所有的观察者


  notifyObservers() {
    console.log("notify all the observers", this.observers);
    this.observers.forEach(observer => observer.notify());
  }

} //使用


const subject = new Subject();
const xiaoQin = new ConcreteObserver("小秦");
const xiaoWang = new ConcreteObserver("小王");
subject.addObserver(xiaoQin);
subject.notifyObservers(); //通知所有