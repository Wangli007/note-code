/**
 * 工厂模式
 * 简单工厂模式  工厂方法模式  抽象工厂模式
 */

/**
 * 简单工厂
 * 简单工厂模式又叫 静态方法模式，即使用者可以直接消费产品而不需要知道产品的具体生产细节。
 * 用户下单购车 => 工厂安排生产 => 工人选定模型 => 工人生产车子 =>车子交付用户 (用户只需要下单  然后等着车子生产完成交付给用户就行了)
 */
class BMW {}

class BMW730 extends BMW {
  run() {
    console.log("BMW730 发动咯");
  }

}

class BMW840 extends BMW {
  run() {
    console.log("BMW840 发动咯");
  }

} //Factory 工厂


class BMWFactory {
  //produce
  static produceBMW(model) {
    if (model === "730") {
      return new BMW730();
    } else {
      return new BMW840();
    }
  }

} //使用


const bmw730 = BMWFactory.produceBMW("730");
const bmw840 = BMWFactory.produceBMW("840");
bmw730.run();
bmw840.run();
/**
 * 工厂类负责创建的对象比较少：由于创建的对象比较少，不会造成工厂方法中业务逻辑过于复杂。
 * 客户端只需知道传入工厂类静态方法的参数，而不需要关心创建对象的细节。
 */

/**
 * 工厂方法模式
 * 这样做的目的是将产品类的实例化操作延迟到工厂子类中完成  即通过工厂子类来确定究竟应该实例化哪一个具体产品类。
 */

class BMWFactory1 {}

class BMW730Factory extends BMWFactory1 {
  produceBMW() {
    return new BMW730();
  }

}

class BMW840Factory extends BMWFactory1 {
  produceBMW() {
    return new BMW840();
  }

}

const bmw730Factory = new BMW730Factory();
const bmw840Factory = new BMW840Factory();
const bmw730_1 = bmw730Factory.produceBMW();
const bmw840_1 = bmw840Factory.produceBMW();
bmw730_1.run();
bmw840_1.run();