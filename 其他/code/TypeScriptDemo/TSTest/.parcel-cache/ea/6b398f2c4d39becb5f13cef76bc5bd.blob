function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 发布订阅模式
 * 消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，然后分别发送给不同的订阅者。
 * 感觉就是观察者模式 => 观察者和主题  之前加一个if判断..
 */
class EventEmitter {
  constructor() {
    _defineProperty(this, "c", new Map());
  }

  // 订阅指定的主题
  subscribe(topic, ...handlers) {
    let topics = this.c.get(topic);

    if (!topics) {
      this.c.set(topic, topics = []);
    }

    topics.push(...handlers);
  } // 取消订阅指定的主题


  unsubscribe(topic, handler) {
    if (!handler) {
      return this.c.delete(topic);
    }

    const topics = this.c.get(topic);

    if (!topics) {
      return false;
    }

    console.log(handler);
    const index = topics.indexOf(handler);

    if (index < 0) {
      return false;
    }

    topics.splice(index, 1);

    if (topics.length === 0) {
      this.c.delete(topic);
    }

    return true;
  } // 为指定的主题发布消息   topic 发布消息的主题  args 发布的消息


  publish(topic, ...args) {
    const topics = this.c.get(topic);

    if (!topics) {
      return null;
    } // console.log(topics);


    return topics.map(handler => {
      try {
        console.log(handler);
        console.log(handler("手动消息"));
        console.log(args);
        return handler(...args);
      } catch (e) {
        console.error(e);
        return null;
      }
    });
  }

} //使用


const eventEmitter = new EventEmitter();
eventEmitter.subscribe("ts", msg => console.log(`收到订阅的消息：${msg}`));
eventEmitter.publish("ts", "TypeScript发布订阅模式");
eventEmitter.unsubscribe("ts");
eventEmitter.publish("ts", "TypeScript发布订阅模式");