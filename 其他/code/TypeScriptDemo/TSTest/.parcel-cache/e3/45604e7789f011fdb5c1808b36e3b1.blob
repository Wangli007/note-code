/**
 * 建造者模式（Builder Pattern）将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。
 */
class Car {
  constructor(engine, chassis, body) {
    this.engine = engine;
    this.chassis = chassis;
    this.body = body;
  }

}

class CarBuilder {
  // 引擎
  // 底盘
  // 车身
  addChassis(chassis) {
    this.chassis = chassis;
    return this;
  }

  addEngine(engine) {
    this.engine = engine;
    return this;
  }

  addBody(body) {
    this.body = body;
    return this;
  }

  build() {
    return new Car(this.engine, this.chassis, this.body);
  }

} //使用示例
//为车子添加引擎 添加底盘  添加车身


const car = new CarBuilder().addEngine("v12").addChassis("复合材料").addBody("镁合金").build();
console.log(car);