/**
 * 适配器模式
 * 在软件工程中，适配器模式的作用是解决两个软件实体间的接口不兼容的问题  原本由于接口不兼容而不能工作的两个软件实体就可以一起工作。
 */

/**
 * <>定义泛型用到的
 * implements  合并接口
 * 静态的方法或者属性  不需要实例化就能访问到的
 */
class AliLogger {
  // implements 重写了sendToServer 方法   然后让Logger 和 CloudLogger都能跑
  async sendToServer(message, type) {
    console.info(message);
    console.info("This Message was saved with AliLogger");
  }

}

class CloudLoggerAdapter {
  constructor(cloudLogger) {
    this.cloudLogger = cloudLogger;
  }

  async info(message) {
    await this.cloudLogger.sendToServer(message, "info");
  }

}

class NotificationService {
  constructor(logger) {
    this.logger = logger;
  }

  async send(message) {
    await this.logger.info(`Notification sended: ${message}`);
  }

}

(async () => {
  const aliLogger = new AliLogger();
  const cloudLoggerAdapter = new CloudLoggerAdapter(aliLogger); // const notificationService = new NotificationService(cloudLoggerAdapter);
  // await notificationService.send("Hello semlinker, To Cloud");
})();